package dijkstra;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;

public class ShortestPath {

	private static class Node{
		Node[] adjacentNodes;
		Integer[] distances;
		String data;
		int shortestDistance;
		Node previousNodeInPath; 
		void adjacent(Node... nodes){
			adjacentNodes = nodes;
		}
		
		void distance(Integer...integers){
			distances = integers;
		}
	}
	public static void main(String[] args) {
		Node a = new Node();
		Node b = new Node();
		Node c = new Node();
		Node d = new Node();
		Node e = new Node();
		Node f = new Node();
		Node g = new Node();
		Node h = new Node();

		a.adjacent(b,c);
		a.distance(5,8);

		b.adjacent(a,f,h);
		b.distance(5,2,1);

		c.adjacent(a,f,d);
		c.distance(8,2,4);

		d.adjacent(c,e,g);
		d.distance(4,2,6);

		e.adjacent(f,d);
		e.distance(2,2);

		f.adjacent(b,e,c);
		f.distance(2,2,2);

		g.adjacent(d,h);
		g.distance(6,7);
		
		h.adjacent(b,g);
		h.distance(1,7);
		
		PriorityQueue<Node> unvisited = 
				new PriorityQueue<Node>(Arrays.asList(a,b,c,d,e,f,g,h));
	}

}
